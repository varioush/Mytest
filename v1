import org.apache.catalina.LifecycleException;
import org.apache.catalina.core.StandardContext;
import org.apache.catalina.startup.Tomcat;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.inject.*;
import org.mindrot.jbcrypt.BCrypt;
io.jsonwebtoken.*;

import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.Date;

public class EmbeddedTomcat {
    private static final int PORT = 8080;
    private static final String CONTEXT_PATH = "/";
    private static final Set<String> PUBLIC_ENDPOINTS = Set.of("/api/login");

    public static void main(String[] args) throws LifecycleException {
        Tomcat tomcat = new Tomcat();
        tomcat.setPort(PORT);
        tomcat.setBaseDir(System.getProperty("java.io.tmpdir"));

        // Create a default context (No webapp, only REST APIs)
        StandardContext ctx = (StandardContext) tomcat.addContext(CONTEXT_PATH, new File(".").getAbsolutePath());
        ctx.setReloadable(false);

        // Setup Guice Injector
        Injector injector = Guice.createInjector(new CommandModule());
        ApiServlet apiServlet = injector.getInstance(ApiServlet.class);

        // Add a single servlet to handle all API requests
        Tomcat.addServlet(ctx, "ApiServlet", apiServlet);
        ctx.addServletMappingDecoded("/api/*", "ApiServlet");

        // Start Tomcat
        tomcat.start();
        System.out.println("Embedded Tomcat started on port " + PORT);
        tomcat.getServer().await();
    }
}

class User {
    private String userId;
    private String passwordHash;
    private String ftl;
    private String mid;

    public User(String userId, String password, String ftl, String mid) {
        this.userId = userId;
        this.passwordHash = BCrypt.hashpw(password, BCrypt.gensalt());
        this.ftl = ftl;
        this.mid = mid;
    }

    public String getUserId() { return userId; }
    public String getPasswordHash() { return passwordHash; }
    public String getFtl() { return ftl; }
    public String getMid() { return mid; }

    public boolean verifyPassword(String password) {
        return BCrypt.checkpw(password, passwordHash);
    }
}

class UserService {
    private final Map<String, User> userStore = new ConcurrentHashMap<>();

    public void saveUser(User user) {
        userStore.put(user.getUserId(), user);
    }

    public List<User> listUsers() {
        return new ArrayList<>(userStore.values());
    }

    public User authenticate(String userId, String password) {
        User user = userStore.get(userId);
        if (user != null && user.verifyPassword(password)) {
            return user;
        }
        return null;
    }
}

class JwtUtil {
    private static final String SECRET_KEY = "mySecretKey";

    public static String generateToken(String userId) {
        return Jwts.builder()
                .setSubject(userId)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + 3600000))
                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)
                .compact();
    }

    public static boolean validateToken(String token) {
        try {
            Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
}

class LoginCommand implements Command {
    private final UserService userService;

    @Inject
    public LoginCommand(UserService userService) {
        this.userService = userService;
    }

    @Override
    public ApiResponse execute(ApiRequest request) {
        Map<String, String> credentials = request.getBodyAsMap();
        User user = userService.authenticate(credentials.get("userId"), credentials.get("password"));
        if (user != null) {
            String token = JwtUtil.generateToken(user.getUserId());
            return new ApiResponse("success", token);
        }
        return new ApiResponse("error", "Invalid credentials");
    }
}

class SaveUserCommand implements Command {
    private final UserService userService;

    @Inject
    public SaveUserCommand(UserService userService) {
        this.userService = userService;
    }

    @Override
    public ApiResponse execute(ApiRequest request) {
        Map<String, String> userData = request.getBodyAsMap();
        User user = new User(userData.get("userId"), userData.get("password"), userData.get("ftl"), userData.get("mid"));
        userService.saveUser(user);
        return new ApiResponse("success", "User saved");
    }
}

class ListUsersCommand implements Command {
    private final UserService userService;

    @Inject
    public ListUsersCommand(UserService userService) {
        this.userService = userService;
    }

    @Override
    public ApiResponse execute(ApiRequest request) {
        return new ApiResponse("success", userService.listUsers());
    }
}

class CommandModule extends AbstractModule {
    @Override
    protected void configure() {
        bind(UserService.class).asEagerSingleton();
        bind(LoginCommand.class);
        bind(SaveUserCommand.class);
        bind(ListUsersCommand.class);
    }
}

class ApiServlet extends HttpServlet {
    private final Map<String, Command> commandMap = new HashMap<>();

    @Inject
    public ApiServlet(LoginCommand loginCommand, SaveUserCommand saveUserCommand, ListUsersCommand listUsersCommand) {
        commandMap.put("/api/login", loginCommand);
        commandMap.put("/api/saveUser", saveUserCommand);
        commandMap.put("/api/listUsers", listUsersCommand);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String path = req.getPathInfo();
        if (!EmbeddedTomcat.PUBLIC_ENDPOINTS.contains(path)) {
            String authHeader = req.getHeader("Authorization");
            if (authHeader == null || !authHeader.startsWith("Bearer ") || !JwtUtil.validateToken(authHeader.substring(7))) {
                resp.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
                resp.getWriter().write(new ObjectMapper().writeValueAsString(new ApiResponse("error", "Missing or invalid Authorization token")));
                return;
            }
        }
        Command command = commandMap.get(path);
        if (command != null) {
            ObjectMapper mapper = new ObjectMapper();
            ApiRequest apiRequest = mapper.readValue(req.getReader(), ApiRequest.class);
            ApiResponse response = command.execute(apiRequest);
            resp.setContentType("application/json");
            mapper.writeValue(resp.getWriter(), response);
        } else {
            resp.sendError(HttpServletResponse.SC_NOT_FOUND, "Command not found");
        }
    }
}
