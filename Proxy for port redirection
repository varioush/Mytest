import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.Collections;
import java.util.Enumeration;
import java.util.List;
import java.util.ArrayList;

@RestController
public class JobRunrProxyController {

    private final RestTemplate restTemplate = new RestTemplate();
    private static final String TARGET_BASE_URL = "http://localhost:9877";

    // List of known path prefixes
    private static final List<String> PATH_PREFIXES = new ArrayList<String>() {{
        add("/dashboard");
        add("/api");
        // You can add more paths like "/admin", "/service", etc.
    }};

    // Route all requests that start with /dashboard or /api to proxy logic
    @RequestMapping("/dashboard/**")
    public ResponseEntity<byte[]> proxyDashboard(HttpServletRequest request,
                                                 @RequestBody(required = false) byte[] body) throws IOException {
        return proxyRequest(request, body, "/dashboard");
    }

    @RequestMapping("/api/**")
    public ResponseEntity<byte[]> proxyApi(HttpServletRequest request,
                                           @RequestBody(required = false) byte[] body) throws IOException {
        return proxyRequest(request, body, "/api");
    }

    // This handles the logic for proxying to the JobRunr server
    private ResponseEntity<byte[]> proxyRequest(HttpServletRequest request, byte[] body, String pathPrefix) throws IOException {
        try {
            String uri = request.getRequestURI();
            String strippedPath = uri.substring(pathPrefix.length());

            // Reconstruct full target URL
            String queryString = request.getQueryString();
            String targetUrl = TARGET_BASE_URL + strippedPath + (queryString != null ? "?" + queryString : "");

            // Copy all headers from incoming request
            HttpHeaders headers = new HttpHeaders();
            Enumeration<String> headerNames = request.getHeaderNames();
            while (headerNames.hasMoreElements()) {
                String headerName = headerNames.nextElement();
                List<String> headerValues = Collections.list(request.getHeaders(headerName));
                headers.put(headerName, headerValues);
            }
            headers.remove(HttpHeaders.HOST);  // Don't forward Host header

            // Create HTTP Entity
            HttpEntity<byte[]> httpEntity = new HttpEntity<>(body, headers);

            // Forward the request to the target server
            ResponseEntity<byte[]> response = restTemplate.exchange(
                    targetUrl,
                    HttpMethod.valueOf(request.getMethod()),
                    httpEntity,
                    byte[].class
            );

            return ResponseEntity
                    .status(response.getStatusCode())
                    .headers(response.getHeaders())
                    .body(response.getBody());

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_GATEWAY)
                    .body(("Failed to proxy to JobRunr server: " + e.getMessage()).getBytes());
        }
    }
    
    // You can also define other routes like /admin/** if needed.
}
